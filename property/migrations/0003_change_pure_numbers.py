# Generated by Django 2.2.24 on 2023-05-18 10:29

import phonenumbers
from django.db import migrations, connection, reset_queries
from django.core.paginator import Paginator


def num_queries(reset=True):
    print(len(connection.queries))
    if reset:
        reset_queries()


def normalize_phone_number(phone_number, region):
    """
    Нормализация телефонного номера по региону
    """
    phone_parts = phonenumbers.parse(phone_number, region)
    if phonenumbers.is_valid_number(phone_parts):
        normalized_phone = f'+{phone_parts.country_code}' \
                           f'{phone_parts.national_number}'
        return normalized_phone


class Migration(migrations.Migration):
    def move_raw_phonenumbers_to_pure_numbers(apps, schema_editor):
        Flat = apps.get_model('property', 'Flat')
        flats = Flat.objects.all()
        paginator = Paginator(flats, 1000)
        for page_number in paginator.page_range:
            page = paginator.page(page_number)
            updates = []
            for item in page.object_list:
                item.owner_pure_phone = normalize_phone_number(
                    item.owners_phonenumber,'RU')
                updates.append(item)
            Flat.objects.bulk_update(updates, ['owner_pure_phone'])
        num_queries()

    def move_backward(apps, schema_editor):
        Flat = apps.get_model('property', 'Flat')
        flats = Flat.objects.all()
        paginator = Paginator(flats, 1000)
        for page_number in paginator.page_range:
            page = paginator.page(page_number)
            updates = []
            for item in page.object_list:
                item.owner_pure_phone.clear()
                updates.append(item)
            Flat.objects.bulk_update(updates, ['owner_pure_phone'])
        num_queries()

    dependencies = [
        ('property', '0002_add_flat_and_complaint'),
    ]

    operations = [
        migrations.RunPython(move_raw_phonenumbers_to_pure_numbers, move_backward),
    ]
